"""writing the partially or total pdb file with updated dataframes"""

import sys
import pandas as pd
import update_residues_pdb as residues
from colors_text import TextColor as bcolors


class WriteResiduePdb:
    """write pdb file"""
    def __init__(self,
                 pdb_df: pd.DataFrame,  # df in pdb format
                 fname: str  # Input file name of LAMMPS data
                 ) -> None:
        self.pdb_file: str = self.write_pdb(pdb_df, fname)

    def write_pdb(self,
                  pdb_df: pd.DataFrame,  # df in pdb format
                  fname: str  # Input file name of LAMMPS data
                  ) -> str:
        """write the dataframe into a file"""
        fout: str  # Name of the output file
        fout = self.rename_file(fname, extension='pdb')
        print(f'{bcolors.OKBLUE}{self.__class__.__name__}: '
              f'({self.__module__})\n'
              f'\tPDB file is `{fout}`{bcolors.ENDC}\n')
        pdb_df['Segment_id'] = [' ' for _ in range(len(pdb_df))]
        pdb_df['charge'] = [' ' for _ in range(len(pdb_df))]
        with open(fout, 'w', encoding="utf8") as f_w:
            f_w.write('HEADER\n')
            f_w.write('REMARK    GENERATED BY TRJCONV\n')
            f_w.write('TITLE     silica_water\n')
            f_w.write('REMARK    THIS IS A SIMULATION BOX\n')
            f_w.write('CRYST1  219.280  219.280  209.526  90.00  90.00')
            f_w.write('  90.00 P 1           1\n')
            f_w.write('MODEL        1\n')
            for row in pdb_df.iterrows():
                line: list[str]  # line with length of pdb line fill by spaces
                line = [' '*79]
                line[0:6] = f'{row[1]["records"]:<6s}'
                line[6:11] = f'{row[1]["atom_id"]:>5d}'
                line[11:12] = ' '
                line[12:16] = f'{row[1]["atom_name"]:<4s}'
                line[16:17] = ' '
                line[17:20] = f'{row[1]["residue_name"]:<3s}'
                line[20:22] = f'{" "*2}'
                line[22:26] = f'{row[1]["residue_number"]:>4d}'
                line[26:27] = ' '
                line[27:30] = f'{" "*3}'
                line[30:38] = f'{row[1]["x"]:>8.3f}'
                line[38:46] = f'{row[1]["y"]:>8.3f}'
                line[46:54] = f'{row[1]["z"]:>8.3f}'
                line[54:60] = f'{row[1]["occupancy"]:>6.2f}'
                line[60:66] = f'{row[1]["temperature"]:>6f}'
                line[66:72] = f'{" "*6}'
                line[72:76] = f'{row[1]["Segment_id"]:<4s}'
                line[76:78] = f'{row[1]["atom_symbol"]:>2s}'
                line[78:] = f'{row[1]["charge"]:2s}'
                f_w.write(''.join(line))
                f_w.write('\n')
            f_w.write('END\n')
        return fout

    @staticmethod
    def rename_file(fname: str,  # Input file name
                    extension: str  # The extension of the output file
                    ) -> str:  # Out put file name
        """rename file name, same name with pdb extension"""
        fout: str  # Output file name
        fout = f'{fname.strip().split(".")[0]}.{extension}'
        return fout


class WritePdb:
    """write main also sepreate pdb file for all the residues if
    needed"""

    def __init__(self,
                 residues_atoms  # residues.UpdateResidues  # All and updates
                 ) -> None:
        self.write_pdb(residues_atoms)

    @staticmethod
    def write_pdb(residues_atoms  # residues.UpdateResidues  # Updates res
                  ) -> None:
        """write all the residues into file, and also the main data"""
        for res, v_df in residues_atoms.updated_residues.items():
            WriteResiduePdb(v_df, res)
        WriteResiduePdb(residues_atoms.updated_atoms, 'updated_system')


if __name__ == '__main__':
    WritePdb(residues.UpdateResidues(sys.argv[1]))
